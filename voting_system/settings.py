"""
Django settings for voting_system project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os 

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Use env var in production; dev fallback only.
SECRET_KEY = os.environ.get('SECRET_KEY', 'dev-insecure-change-me')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() in ('1','true','yes')

def _split_csv_env(name, default):
    raw = os.environ.get(name, default)
    parts = []
    for item in raw.split(','):
        cleaned = item.strip().strip('\'"')
        if cleaned:
            parts.append(cleaned)
    return parts

ALLOWED_HOSTS = _split_csv_env(
    'ALLOWED_HOSTS',
    '127.0.0.1,localhost,verify.agm.local,vote.agm.local,.onrender.com'
)

SITE_URL = os.getenv('SITE_URL', 'http://127.0.0.1:8000')


import os
import dj_database_url

# Parse the DATABASE_URL from the environment
default_sqlite = f'sqlite:///{os.path.join(BASE_DIR, "db.sqlite3")}'
# First load without forcing SSL; enforce per-engine below to avoid sqlite errors
DATABASES = {
    'default': dj_database_url.config(
        default=os.getenv('DATABASE_URL', default_sqlite),
        # Keep DB connections open to avoid reconnect churn and SSL handshakes
        conn_max_age=int(os.getenv('DB_CONN_MAX_AGE', '120')),
        ssl_require=False,
    )
}
# Health checks ensure persistent connections are validated before reuse
try:
    DATABASES['default']['CONN_HEALTH_CHECKS'] = True
except Exception:
    pass

# Enforce SSL only for Postgres; strip any sslmode option for sqlite
engine = (DATABASES['default'].get('ENGINE') or '')
if engine.endswith('postgresql'):
    DATABASES['default'].setdefault('OPTIONS', {})
    DATABASES['default']['OPTIONS'].setdefault('sslmode', 'require')
else:
    # Remove accidental sslmode from non-Postgres engines (e.g., sqlite)
    try:
        opts = DATABASES['default'].get('OPTIONS') or {}
        opts.pop('sslmode', None)
        if opts:
            DATABASES['default']['OPTIONS'] = opts
        elif 'OPTIONS' in DATABASES['default']:
            del DATABASES['default']['OPTIONS']
    except Exception:
        pass

#ALLOWED_HOSTS = ['transitus-voting-sytem.onrender.com']
# Application definition

INSTALLED_APPS = [
    'voters',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'voting_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'voting_system.wsgi.application'



# Database settings are already configured above via dj_database_url.


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/




# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'voting_static'),  # Point to your local static folder
]
STATIC_ROOT = os.path.join(BASE_DIR, 'static')


# BASE_URL for QR code generation (use your own URL or localhost during development)
BASE_URL = os.environ.get('BASE_URL', 'http://127.0.0.1:8000')

# Feature flags & cross-service secrets
ANON_HANDOFF_ENABLED = True  # toggleable; keep default True
CIS_BBS_SHARED_SECRET = os.environ.get('CIS_BBS_SHARED_SECRET', 'dev-change-me')
# Host separation for CIS; allow single-host by default for Render
CIS_ENFORCE_HOST = os.environ.get('CIS_ENFORCE_HOST', 'false').lower() in ('1','true','yes')
CIS_EXPECT_HOST_FRAGMENT = os.environ.get('CIS_EXPECT_HOST_FRAGMENT', 'verify')

# Optional base URLs when running with host separation
# If unset (recommended for single-host), views derive from request host
CIS_BASE_URL = os.environ.get('CIS_BASE_URL')  # e.g. https://verify.agm.local
BBS_BASE_URL = os.environ.get('BBS_BASE_URL')  # e.g. https://vote.agm.local

# Security & host separation
CSRF_TRUSTED_ORIGINS = [
    'https://verify.agm.local',
    'https://vote.agm.local',
    'https://*.onrender.com',
]

render_external_url = os.getenv('RENDER_EXTERNAL_URL', '').strip()
if render_external_url:
    if not render_external_url.startswith(('http://', 'https://')):
        render_external_url = f'https://{render_external_url}'
    CSRF_TRUSTED_ORIGINS.append(render_external_url.rstrip('/'))
CSRF_TRUSTED_ORIGINS = list(dict.fromkeys(CSRF_TRUSTED_ORIGINS))

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'squelch_ballot': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: not (getattr(r, 'request', None) and getattr(r.request, 'path', '') and ('/ballot' in r.request.path or '/api/cast' in r.request.path)),
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'filters': ['squelch_ballot'],
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Cookies
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# Behind proxy (Render) â€” ensure Django treats proxied HTTPS as secure
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Where to send @login_required redirects
LOGIN_URL = '/'
